#+title: TempEl - Simple templates for Emacs
#+author: Daniel Mendler
#+language: en

#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://github.com/minad/corfu/blob/screenshots/emacs.svg?raw=true"/></a>
#+html: <a href="https://melpa.org/#/tempel"><img alt="MELPA" src="https://melpa.org/packages/tempel-badge.svg"/></a>
#+html: <a href="https://stable.melpa.org/#/tempel"><img alt="MELPA Stable" src="https://stable.melpa.org/packages/tempel-badge.svg"/></a>
#+html: <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/38/Temple_of_Hephaestus_%28Southwest%29%2C_Athens_-_20070711b.jpg/1920px-Temple_of_Hephaestus_%28Southwest%29%2C_Athens_-_20070711b.jpg" align="right" width="30%">

* Introduction

Tempel is a tiny template package for Emacs, which uses the syntax of the
Emacs Tempo library. Tempo is an ancient temple. It is 27 years old, but still
in good shape since it successfully resisted change over the decades. Tempel
is a modernized implementation of Tempo, in the form of two commands:

+ ~tempel-expand~: Expand a template at point in the buffer. If called
  non-interactively the function behaves like a completion-at-point-function
  (Capf). You may want to use my [[https://github.com/minad/corfu][Corfu]] completion at point UI.
+ ~tempel-insert~: Select a template by name and insert it into the current buffer.

After inserting a template you can move between the visible template fields with
keys ~M-left/right~ as defined in the ~tempel-map~ keymap. As soon as you move
before (behind) the first (last) field, the fields are removed.

Note that this package is not a competitor to the mature and widely used
YASnippet library. Try Tempel only if your snippet and templating requirements
are limited and if you like tiny and simple packages. Tempel took inspiration
from the [[https://nschum.de/src/emacs/tempo-snippets/][Tempo-Snippets]] package by Nikolaj Schumacher ([[https://github.com/nschum/tempo-snippets.el][GitHub link]]).

* Quick start

As of 2022-01-05 the package is not yet available in a package repository
and has to be installed manually with ~package-install-file~.

#+begin_src emacs-lisp
  ;; Bind the Tempel commands
  (use-package tempel
    :bind (("M-+" . tempel-expand)
           ("M-*" . tempel-insert)))

  ;; Optional: Use the Corfu completion UI
  (use-package corfu
    :init
    (corfu-global-mode))
#+end_src

* Template file format

The template file format is a lisp file =templates= which is stored by default in
the ~user-emacs-directory~ (=~/.config/emacs/templates=). The templates are defined
as lisp expressions in the concise form of the Emacs Tempo package. The first
element of the list is the name of the template. After the name the Tempo
elements follow.

#+begin_src emacs-lisp
;; -*- mode: lisp -*-

latex-mode

(begin "\\begin{" (P "Environment: " env) "}" > n> r> "\\end{" (s env) "}" > n)
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}" > n)
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}" > n)

emacs-lisp-mode

(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")" n n)
(const "(defconst " p "\n  \"" p "\")" n n)
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")" n n)
(face "(defface " p " '((t :inherit font-lock-" p "-face))\n  \"" p "\")" n n)
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")" n n)
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")" n n)
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")" n n)
(let "(let (" p ")" n> r> ")")
(star "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive)" n> r> ")" n n)

org-mode

(title "#+title: " p n "#+author: Daniel Mendler" n "#+language: en" n n)
#+end_src

* Template syntax

All the syntax elements of ~tempo-define-template~ are supported. We document
the important ones here:

 - "string" :: Inserts a string literal.
 - ~p~ :: Inserts an unnamed prompt field.
 - ~r~ :: Inserts the current region.
 - ~(s NAME)~ :: Inserts a named field.
 - ~(q PROMPT NAME)~ :: Query the user via ~read-string~, store variable ~NAME~.
 - ~n~ :: Inserts a newline.
 - ~>~ :: Indents with ~indent-according-to-mode~.
 - ~r>~ :: The region, but indented.
 - ~n>~ :: Inserts a newline and indents.
 - ~&~ :: Insert newline if there is only whitespace between line start and point.
 - ~%~ :: Insert newline if there is only whitespace between point and line end.
 - ~o~ :: Like ~%~ but leaves the point before newline.
 - ~(form ...)~ :: Other lisp forms are evaluated. Named fields are lexically bound.
   Use caution with templates which execute code!
